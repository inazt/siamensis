<?php
// $Id: content_timelock.module,v 1.1.2.11 2010/04/18 12:39:20 eugenmayer Exp $

/**
 * @file
 * Allows users to lock documents for modification.
 */

/**
 * Implementation of hook_perm().
 */
function content_timelock_perm() {
  return array('check out documents', 'keep documents checked out', 'administer checked out documents');
}

/**
 * Implementation of hook_help().
 */
function content_timelock_help($path, $arg) {
  switch ($path) {
    case 'admin/help#content_timelock':
      $output = '<p>'. t("Drupal's default content locking strategy is optimistic, that is, two users may start to edit the same content and the one who is hitting the save button first wins the race, while the other is displayed a message stating <em>this content has been modified by another user, changes cannot be saved</em>.  Depending on the number of editors in your organization this might not be an acceptable solution.") .'</p>';
      $output .= '<p>'. t('The Content locking module implements pessimistic locking, which means that content will be exclusively locked whenever a user starts editing it.  The lock will be automatically released when the user submits the form or navigates away from the edit page.') .'</p>';
      $output .= '<p>'. t('Users may also permanently lock content, to prevent others from editing it.  Content locks that have been "forgotten" can be automatically released after a configurable time span.') .'</p>';
      return $output;

    case 'admin/content/node/content_timelock':
      return '<p>'. t('Below is a list of all locked documents. Click on <em>check in</em> to release a lock.') .'</p>';

    case 'user/%user/content_timelock':
      return '<p>'. t('Below is a list of all documents locked by you. Click on <em>check in</em> to release a lock.') .'</p>';
  }
}

/**
 * Implementation of hook_menu().
 */
function content_timelock_menu() {
  $items['admin/content/node/content_timelock'] = array(
    'title' => 'Locked documents',
    'page callback' => 'content_timelock_overview',
    'access callback' => 'user_access',
    'access arguments' => array('administer checked out documents'),
    'weight' => 5,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/content/node/content_timelock/release'] = array(
    'page callback' => 'content_timelock_release_item',
    'page arguments' => array(5, NULL),
    'access arguments' => array('administer checked out documents'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/content/%/content_timelock/releaseown'] = array(
    'page callback' => 'content_timelock_release_own_item',
    'page arguments' => array(2),
    'access arguments' => array('check out documents'),
    'type' => MENU_CALLBACK,
  );
  $items['user/%user/content_timelock'] = array(
    'title' => 'Locked documents',
    'page callback' => 'content_timelock_overview',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('check out documents'),
    'weight' => 5,
    'type' => MENU_LOCAL_TASK
  );
  $items['user/%user/content_timelock/release'] = array(
    'page callback' => 'content_timelock_release_item',
    'page arguments' => array(4, 1),
    'access arguments' => array('check out documents'),
    'type' => MENU_CALLBACK
  );
  $items['node/%/canceledit'] = array (
        'page callback' => 'content_timelock_release_own_item',
        'page arguments' => array(1),
        'access callback' => true
  );

  $items['ajax/content_timelock/%/canceledit'] = array (
        'page callback' => 'content_timelock_release_own_item',
        'page arguments' => array(2,false),
        'access callback' => true
  );

  $items['admin/settings/content_timelock'] = array (
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Content lock',
    'description' => 'Configuration options for the Content lock module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('content_timelock_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'content_timelock.admin.inc'
   );

  return $items;
}

/**
 * Implementation of hook_nodeapi().
 */
function content_timelock_nodeapi(&$node, $op, $teaser, $page) {
  global $user;
  static $messages_shown = false;

  switch ($op) {
    case 'validate':
      if (isset($node->nid) && user_access('check out documents')) {
        // Existing node. Check if we still own the lock.
        if ($lock = content_timelock_fetch_lock($node->nid)) {
          if ($lock->uid != $user->uid) {
            // Lock is no longer ours.
            form_set_error('changed', t('Your lock has been removed!') .'<br />'. content_timelock_lock_owner($lock) .'<br />'. t('You can still save the content if this user aborts the edit operation without saving changes.'));
          }
        }
        else {
          // Node is not locked. Try to re-lock if node is unchanged.
          if (node_last_changed($node->nid) > $node->changed || !content_timelock_node($node->nid, $user->uid)) {
            form_set_error('alsochanged', t('Your lock has been removed due to inactivity or by an administrator. Failed to regain the lock since the document has been changed since.'));
          }
        }
      }
      break;
    case 'update':
        content_timelock_release($node->nid, $user->uid);
      break;
    case 'insert':
      if($node->type=='forum'){
        drupal_set_message(print_r(variable_get('content_timelock_warning_message',t('You cant edit this topic after 24 hours ^^')),1));
      }
      break;
    case 'delete':
      content_timelock_release($node->nid, NULL);
      break;
    case 'view':
      global $user;
      if(!$messages_shown) {
        _content_timelock_show_warnings();
        $messages_shown = true;
      }

      if($node->build_mode != NODE_BUILD_PREVIEW) {
        content_timelock_warn_pending_locks($user->uid); // check if the user has pending locks and warn him
      }
      break;
  }
}

/**
 * Implementation of hook_form_alter().
 */
function content_timelock_form_alter(&$form, $form_state, $form_id) {
  global $user;
  _content_timelock_add_nodeadministration($form, $form_state, $form_id);

  if(variable_get('content_timelock_admin_cancelbutton', true)) {
    _content_timelock_add_cancelbutton($form, $form_state, $form_id);
  }
  // this form are blacklisten, so nodes of this type never get locked
  $node_type_blacklist = array(
    //"user" => true   // we are not allowed to lock on users form edit, as it always returns to the edit form..
  );
  $have_access = in_array('moderator', array_values($user->roles)) || $user->uid ==1 ;
  $node = $form['#node'];
  $nid = $form['nid']['#value'];
  $time_limit = variable_get('content_timelock_live_time',24);
  $diff_time = (time()-$form['created']['#value']);

  if($diff_time > 60*$time_limit &&
     $node !=NULL &&
     $node->type=='forum'  &&
     ($node->type."_node_form" == $form_id) &&
     ($form_state['submitted'] === false) &&
     !$have_access 
     
  ){

    _content_timelock_add_unload_js($form);
    if(content_timelock_node($nid, $user->uid) == false) {
        // could not lock node, its locked by someone else
        drupal_goto("node/$nid");
     }
  }
/*  global $user;
  _content_timelock_add_nodeadministration($form, $form_state, $form_id);

  if(variable_get('content_timelock_admin_cancelbutton', true)) {
    _content_timelock_add_cancelbutton($form, $form_state, $form_id);
  }
  // this form are blacklisten, so nodes of this type never get locked
  $node_type_blacklist = array(
    "user" => true   // we are not allowed to lock on users form edit, as it always returns to the edit form..
  );

  $node = $form['#node'];
  $nid = $form['nid']['#value'];

  if( $node_type_blacklist[$node->type] !== true  // If this node is blacklisted, dont lock
      && user_access('check out documents')       // The user must have this permission to be able to lock
      && ($node->type."_node_form" == $form_id)   // Dont lock if we are administrating the node-type
      && ($node != NULL)                          // If we somehow have no node, no need to lock at all
      && ($user->uid > 0)                           // A valid user is needed for locking
      && ($form_state['submitted'] === false)     // submitted: is true if we save, but false if its a preview. We dont want to try to lock and saves
      && (!empty($nid))                           // nid: If we have no nid, we are adding a node and therefor we need not locking.
      && $form_id != "comment_form")              // form_id: if we just got called because of adding a comment, we dont need to lock the node itself
    {
    _content_timelock_add_unload_js($form);
    if(isset($form_state['post']) && is_array($form_state['post']) && $form_state['post']['form_build_id'] != '') {
      // We are handling a preview (yes thats the condition to detect that..).
      // We dont need anything here right now
    }
    else {
      // Finally set the lock if everthing passed.
      if(content_timelock_node($nid, $user->uid) == false) {
        // could not lock node, its locked by someone else
        drupal_goto("node/$nid");
      }
    }
  }*/
}

function _content_timelock_add_unload_js($form) {
  $m = drupal_get_path('module','content_timelock');
  drupal_add_js("$m/js/jquery.url.packed.js",'module');
  drupal_add_js("$m/js/onUserExit.js",'module');
  drupal_add_js("$m/js/content_timelock_init.js",'module');
  drupal_add_js(array('content_timelock' => array('nid' => $form['#node']->nid)), 'setting');
}

function _content_timelock_verbose() {
  return variable_get('content_timelock_admin_verbose', true);
}

function _content_timelock_add_nodeadministration(&$form, $form_state, $form_id) {
  $form['buttons']['#prefix'] = "<div class='buttons-wrapper'>";
  $form['buttons']['#suffix'] = "</div>";
}

function _content_timelock_add_cancelbutton(&$form, $form_state, $form_id) {
  if (isset($form['#id'])) {
    if( $form['#id'] == 'comment-form' ) {
      $node = $form['#node'];
      $form['cancel']['#type'] = 'markup';
      $form['cancel']['#weight'] = 2000;
      $form['cancel']['#value'] = l(t('Cancel'), 'node/' . $form['nid']['#value']."/canceledit", array( 'attributes' => array( 'class' => 'form-submit form-submit-cancel')));
    }
    else if( $form['#id'] == 'user-profile-form' ) {
      $form['buttons'] = array('#weight' => 20000);
      $form['buttons']['submit'] = $form['submit'];
	    $form['buttons']['submit']['#weight'] = -5;
      if(isset($form['delete'])) {
        $form['buttons']['delbtn'] = $form['delete'];
        $form['buttons']['delbtn']['#weight'] = -4;
      }

      $form['buttons']['cancel']['#type'] = 'markup';
      $form['buttons']['cancel']['#weight'] = 2000;
      $form['buttons']['cancel']['#value'] = l(t('Cancel'), 'user/' . $form['#uid'] ."/canceledit", array( 'attributes' => array( 'class' => 'form-submit form-submit-cancel')));
      unset($form['submit']);
      unset($form['delete']);
    }
    // edit node
    else if($form['#id'] == 'node-form'){
      $node = $form['#node'];

      $form['buttons']['cancel']['#type'] = 'markup';
      $form['buttons']['cancel']['#weight'] = 2000;
      $form['buttons']['cancel']['#value'] = l(t('Cancel'), 'node/' . $node->nid ."/canceledit", array( 'attributes' => array( 'class' => 'form-submit form-submit-cancel')));
      if(isset($form['buttons']['delete'])) {
        $form['buttons']['delete']['#weight'] = 2001;
      }
    }
    // add node
    else if(($form['#id'] == 'node-form'  ) && (arg(0) == 'node') ){
      $node = $form['#node'];

      $form['buttons']['cancel']['#type'] = 'markup';
      $form['buttons']['cancel']['#weight'] = 2000;
      $form['buttons']['cancel']['#value'] = l(t('Cancel'), '', array( 'attributes' => array( 'class' => 'form-submit form-submit-cancel')));
    }
  }
}

/**
 * Implementation of hook_cron().
 *
 * Release nodes that have been locked longer than the configured period.
 */
function content_timelock_cron() {
  $content_timelock_clear = variable_get('content_timelock_clear', 0);
  if ($content_timelock_clear > 0) {
    $result = db_query('DELETE FROM {content_timelock} WHERE timestamp < %d', time() - $content_timelock_clear);
    if ($num = db_affected_rows($result)) {
      $period = format_interval($content_timelock_clear);
      if(_content_timelock_verbose()) {
        drupal_set_message(format_plural($num, 'Released one document locked for more than @period.', 'Released @count documents locked for more than @period.', array('@period' => $period)));
      }
      watchdog('content_timelock', 'Released @count document(s) locked for more than @period.', array('@count' => $num, '@period' => $period));
    }
  }
}

/**
 * Extract the node id from a node edit path.
 *
 * @param $path
 *   The path to match.
 * @return
 *   The node id extracted from the path.
 */
function content_timelock_get_nid($path) {
  static $regexp;

  if (!isset($regexp)) {
    $patterns = variable_get('content_timelock_edit_paths', "edit\nrevisions\nrevisions/*\noutline\nclassify");
    $regexp = '@^node/(\d+)/(?:'. preg_replace(array('/(\r\n?|\n)/', '/\\\\\*/'), array('|', '.*'), preg_quote($patterns, '@')) .')$@';
  }
  if (preg_match($regexp, $path, $match)) {
    return $match[1];
  }
  return FALSE;
}

/**
 * Fetch the lock for a node.
 *
 * @param $nid
 *   A node id.
 * @return
 *   The lock for the node. FALSE, if the document is not locked.
 */
function content_timelock_fetch_lock($nid) {
  return db_fetch_object(db_query("SELECT c.*, u.name FROM {content_timelock} c LEFT JOIN {users} u ON u.uid = c.uid WHERE c.nid = %d", $nid));
}

/**
 * Tell who has locked node.
 *
 * @param $lock
 *   The lock for a node.
 * @return
 *   String with the message.
 */
function content_timelock_lock_owner($lock) {
  $username = theme('username', $lock);
  $date = format_date($lock->timestamp, 'medium');
  return t('This document is locked for editing by !name since @date.', array('!name' => $username, '@date' => $date));
}

/**
 * Try to lock a document for editing.
 *
 * @param $nid
 *   A node id.
 * @param $uid
 *   The user id to lock the node for.
 * @return
 *   FALSE, if a document has already been locked by someone else.
 */
function content_timelock_node($nid, $uid) {
  if ($lock = content_timelock_fetch_lock($nid)) {

    // Node is already locked.
    // Deny editing this node even if the node is locked by the same user.
   
      $message = content_timelock_lock_owner($lock);

      if ($lock->uid == $uid) {
        $url = "user/$uid/content_timelock/release/$nid";
      }
      else if (user_access('administer checked out documents')) {
        $url = "admin/content/node/content_timelock/release/$nid";
      }
      if (isset($url)) {
        $message .= '<br />'. t('Click <a href="!release-url">here</a> to check back in now.', array('!release-url' => url($url, array('query' => 'destination='. $_GET['q']))));
      }

      //drupal_set_message($message, 'error');
      drupal_set_message(t(variable_get('content_timelock_error_message','Error pass 24 hours arleady ^^')), 'error');
      return FALSE;
    
  }
  else {
    // Lock node.
    $data = array(
      'nid' => $nid,
      'uid' => $uid,
      'timestamp' => time()
    );
    drupal_write_record(
      'content_timelock',
      $data
    );
    if(_content_timelock_verbose()) {
      //drupal_set_message(t('This document is now locked against simultaneous editing. It will unlock when you navigate elsewhere.'));
    }
      if ($lock = content_timelock_fetch_lock($nid)) {
      // Node is already locked.
      // Deny editing this node even if the node is locked by the same user.
    
        $message = content_timelock_lock_owner($lock);

        if ($lock->uid == $uid) {
          $url = "user/$uid/content_timelock/release/$nid";
        }
        else if (user_access('administer checked out documents')) {
          $url = "admin/content/node/content_timelock/release/$nid";
        }
        if (isset($url)) {
          $message .= '<br />'. t('Click <a href="!release-url">here</a> to check back in now.', array('!release-url' => url($url, array('query' => 'destination='. $_GET['q']))));
        }

        //drupal_set_message($message, 'error');
        drupal_set_message(t(variable_get('content_timelock_error_message','Error pass 24 hours arleady ^^')), 'error');
        return FALSE;
      
    }
  }
  
  return TRUE;  /*if ($lock = content_timelock_fetch_lock($nid)) {
    // Node is already locked.
    // Deny editing this node even if the node is locked by the same user.
    if ($lock->uid != $uid) {
      $message = content_timelock_lock_owner($lock);

      if ($lock->uid == $uid) {
        $url = "user/$uid/content_timelock/release/$nid";
      }
      else if (user_access('administer checked out documents')) {
        $url = "admin/content/node/content_timelock/release/$nid";
      }
      if (isset($url)) {
        $message .= '<br />'. t('Click <a href="!release-url">here</a> to check back in now.', array('!release-url' => url($url, array('query' => 'destination='. $_GET['q']))));
      }

      drupal_set_message($message, 'error');
      return FALSE;
    }
  }
  else {
    // Lock node.
    $data = array(
      'nid' => $nid,
      'uid' => $uid,
      'timestamp' => time()
    );
    drupal_write_record(
      'content_timelock',
      $data
    );
    if(_content_timelock_verbose()) {
      drupal_set_message(t('This document is now locked against simultaneous editing. It will unlock when you navigate elsewhere.'));
    }
  }
  
  return TRUE;
  */
}

/**
 * Release a locked node.
 *
 * @param $nid
 *   The node id to release the edit lock for.
 * @param $uid
 *   If set, verify that a lock belongs to this user prior to release.
 */
function content_timelock_release($nid, $uid = NULL) {
  $add_sql = '';
  $args = array($nid);
  if (isset($uid)) {
    $add_sql = " AND uid = %d";
    $args[] = $uid;
  }
  db_query("DELETE FROM {content_timelock} WHERE nid = %d". $add_sql, $args);
}

/**
 * Build an overview of locked documents.
 *
 * @param $account
 *   A user object.
 */
function content_timelock_overview($account = NULL) {
  $header = array(array('data' => t('Title'), 'field' => 'n.title', 'sort' => 'asc'));
  if (!$account) {
    $header[] = array('data' => t('Username'), 'field' => 'u.name');
    $uid = NULL;
  }
  else {
    $uid = $account->uid;
  }
  $header[] = array('data' => t('Locked since'), 'field' => 'c.timestamp');
  $header[] = t('Operations');

  $rows = array();
  $add_sql = $uid ? " WHERE c.uid = %d" : '';
  $result = pager_query('SELECT c.*, n.title, u.name FROM {content_timelock} c INNER JOIN {node} n ON n.nid = c.nid INNER JOIN {users} u ON u.uid = c.uid'. $add_sql . tablesort_sql($header), 50, 0, NULL, $uid);
  $url = $uid ? "user/$uid/content_timelock/release" : 'admin/content/node/content_timelock/release';

  while ($data = db_fetch_object($result)) {
    $row = array();
    $row[] = l($data->title, "node/$data->nid");
    if (!$uid) {
      $row[] = theme('username', user_load(array('uid' => $data->uid)));
    }
    $row[] = format_date($data->timestamp, 'small');
    $row[] = l(t('release lock'), "$url/$data->nid");
    $rows[] = $row;
  }

  $output = theme('table', $header, $rows, array('id' => 'content_timelock'));
  if (!$rows) {
    $output .= t('No locked documents.');
  }
  else if ($pager = theme('pager', array(), 50, 0)) {
    $output .= $pager;
  }

  return $output;
}

/**
 * Menu callback; release a locked node for all users or a specific user.
 *
 * @param $nid
 *   A node id.
 * @param $account
 *   A user object.
 * @return
 *   This function will execute a redirect and doesn't return.
 */
function content_timelock_release_item($nid, $account = NULL) {
  content_timelock_release($nid, $account ? $account->uid : NULL);
  if(_content_timelock_verbose()) {
    drupal_set_message(t('The editing lock has been released.'));
  }
  drupal_goto($account ? "user/{$account->uid}/content_timelock" : 'admin/content/node/content_timelock');
}

/**
 * For every lock a user current have on any nodes, print a warning messagt
 * with an link to release this node.
 *
 */
function content_timelock_warn_pending_locks($uid) {
  // cache
  static $warned_nodes = array();
  static $content_timelock_messages_printed = false;
  if($content_timelock_messages_printed) {
    return;
  }

  if(array_key_exists($uid,$warned_nodes)){
    // do nothing
  }
  else {
    // load form db
    $warned_nodes[$uid] = array();
    $result = db_query("SELECT cl.nid,n.title FROM {content_timelock} as cl LEFT JOIN {node} as n on cl.nid=n.nid WHERE cl.uid = %d", $uid);
    while($lock = db_fetch_object($result)) {
      $warned_nodes[$uid][] = $lock;
    }
  }

  foreach($warned_nodes[$uid] as $lock) {
    $editlink = l(t('edit'),"node/{$lock->nid}/edit");
    $unlocklinkhere = l(t('here'),"admin/content/{$lock->nid}/content_timelock/releaseown");
    //_content_timelock_save_lock_warning(t("You are currently blocking the node '!nodetitle' against edits. You might want to do this by clicking !unlocklinkhere, or !edit the node", array ('!nodetitle' => $lock->title, '!edit' => $editlink, '!unlocklinkhere' => $unlocklinkhere)),$lock->nid);
  }
  $content_timelock_messages_printed = true;
}

function _content_timelock_save_lock_warning($message, $nid) {
  if(empty($_SESSION['content_timelock'])) {
    $_SESSION['content_timelock'] = '';
  }
  $data = unserialize($_SESSION['content_timelock']);
  if(!is_array($data)) {
    $data = array();
  }

  if(array_key_exists($nid,$data)) {
    return;
  }

  $data[$nid] = $message;
  $_SESSION['content_timelock'] = serialize($data);
}

function _content_timelock_show_warnings() {
  global $user;
  if(empty($_SESSION['content_timelock'])) {
    return;
  }
  $data = unserialize($_SESSION['content_timelock']);
  if(!is_array($data) || count($data) == 0) {
    return;
  }
  foreach($data as $nid => $messsage) {
    if(_content_timelock_still_locked($user->uid,$nid) > 0){
      drupal_set_message($messsage,'warning');
    }
  }
  $_SESSION['content_timelock'] = '';
}

function _content_timelock_still_locked($uid,$nid) {
  $result = db_result(db_query("SELECT count(cl.nid) FROM {content_timelock} as cl  WHERE cl.uid = %d AND cl.nid=%d", $uid,$nid));
  return $result;
}

/**
 * Release the lock of a node. We are using the current users uid, so the user only can delete
 * his own locks. We never fail, as if the lock does not exist, the node is unlocked anyway
 */
function content_timelock_release_own_item($nid, $response = true) {
  global $user;

  if($nid != NULL) {
    content_timelock_release($nid,$user->uid);
   // drupal_get_messages();
    if($response) {
      drupal_goto("node/$nid");
    }
    else {
      exit();
    }
  }
  else { // thats what we do, if a user was creating a node and canceled
    if($response) {
      drupal_goto();
    }
    else {
      exit();
    }
  }
}

function content_timelock_preprocess_comment(&$variables) {
  global $user;  
  // 24 hours = 86400 secs
  $have_access = in_array('moderator',array_values($user->roles) ) || $user->uid==1;
  $diff_time = time()-$variables['comment']->timestamp;
  if($have_access==false &&  variable_get('content_timelock_disable_alter_button',false)==true) {
    $links = comment_links($variables['comment'], 1);
    unset($links['comment_edit']);
    unset($links['comment_delete']);
    $variables['links']     = isset($links) ? theme('links', $links) : '';  
  }
}
